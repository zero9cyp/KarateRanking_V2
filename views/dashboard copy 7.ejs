<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">

<style>
  body {
    background-color: #f8f9fa;
  }

  .filter-card {
    background: #fff;
    border-radius: 1rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
  }

  .filter-label {
    font-weight: 600;
    color: #0d6efd;
  }

  th.sortable {
    cursor: pointer;
    user-select: none;
  }

  th.sortable:hover {
    color: #0d6efd;
    text-decoration: underline;
  }

  /* ðŸ©· custom pink badge for females */
  .bg-pink {
    background-color: #e83e8c !important;
    color: #fff !important;
  }
</style>

<div class="container mt-5 mb-5">

  <!-- Header -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="fw-bold text-primary mb-0">
      <i class="bi bi-trophy-fill me-2"></i> Karate Ranking Dashboard
    </h1>
    <button class="btn btn-outline-primary btn-sm" id="refreshBtn">
      <i class="bi bi-arrow-clockwise"></i> Refresh
    </button>
  </div>

  <!-- Filters Card -->
  <div class="filter-card mb-4">
    <div class="row g-3 align-items-end">

      <!-- AGE -->
      <div class="col-md-3">
        <label class="filter-label">Age Category</label>
        <select id="ageCategoryFilter" class="form-select" multiple>
          <% ageCategories.forEach(cat => { %>
          <option value="<%= cat.id %>"><%= cat.name %></option>
          <% }) %>
        </select>
        <small class="text-muted">Hold Ctrl/Cmd to select multiple</small>
      </div>

      <!-- GENDER -->
      <div class="col-md-2">
        <label class="filter-label">Gender</label>
        <select id="genderFilter" class="form-select">
          <option value="">All</option>
          <option value="male">Male</option>
          <option value="female">Female</option>
        </select>
      </div>

      <!-- SEARCH -->
      <div class="col-md-3">
        <label class="filter-label">Search Name</label>
        <input id="searchFilter" type="text" class="form-control" placeholder="Type athlete name...">
      </div>

      <!-- TOURNAMENT -->
      <div class="col-md-3">
        <label class="filter-label">Tournament</label>
        <select id="tournamentFilter" class="form-select">
          <option value="">All</option>
        </select>
      </div>

      <!-- RESULTS ONLY -->
      <div class="col-md-2 d-flex align-items-center">
        <div class="form-check mt-3">
          <input class="form-check-input" type="checkbox" id="withResultsOnly">
          <label class="form-check-label fw-semibold" for="withResultsOnly">
            With Results
          </label>
        </div>
      </div>
    </div>
  </div>

  <!-- Athletes Table -->
  <div class="card shadow border-0">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
      <h5 class="mb-0"><i class="bi bi-people-fill"></i> Athletes Overview</h5>
      <span class="badge bg-light text-dark" id="athleteCount"></span>
    </div>
    <div class="card-body p-0">
      <div class="table-responsive">
        <table class="table table-striped table-hover align-middle mb-0" id="athletesTable">
          <thead class="table-primary">
            <tr>
              <th style="width:60px;">#</th>
              <th class="sortable" data-sort="name">Name <i class="bi bi-arrow-down-up"></i></th>
              <th class="sortable" data-sort="gender">Gender <i class="bi bi-arrow-down-up"></i></th>
              <th class="sortable" data-sort="club">Club <i class="bi bi-arrow-down-up"></i></th>
              <th class="sortable" data-sort="weight">Weight <i class="bi bi-arrow-down-up"></i></th>
              <th class="sortable" data-sort="points">Total Points <i class="bi bi-arrow-down-up"></i></th>
              <th>Tournaments</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  const ageCategorySelect = document.getElementById('ageCategoryFilter');
  const tournamentSelect = document.getElementById('tournamentFilter');
  const withResultsCheckbox = document.getElementById('withResultsOnly');
  const tableBody = document.querySelector('#athletesTable tbody');
  const athleteCount = document.getElementById('athleteCount');
  const refreshBtn = document.getElementById('refreshBtn');
  const searchFilter = document.getElementById('searchFilter');
  const genderFilter = document.getElementById('genderFilter');
  const sortableHeaders = document.querySelectorAll('th.sortable');

  let athletesData = [];
  let allTournaments = [];
  let currentSort = {
    key: 'name',
    asc: true
  };

  async function fetchAthletes(ageCategoryIds) {
    if (!ageCategoryIds || ageCategoryIds.length === 0) ageCategoryIds = ['all'];

    const gender = genderFilter.value.trim();
    const search = searchFilter.value.trim();

    const queryParams = new URLSearchParams();
    if (gender) queryParams.append('gender', gender);
    if (search) queryParams.append('search', search);

    const res = await fetch(`/dashboard/age-multiple/${ageCategoryIds.join(',')}?${queryParams.toString()}`);
    const data = await res.json();

    if (data.success) {
      athletesData = data.athletes || [];
      allTournaments = data.tournaments || [];
      populateTournamentFilter();
      sortAthletes();
      renderTable();
    }
  }

  function populateTournamentFilter() {
    tournamentSelect.innerHTML = '<option value="">All</option>';
    allTournaments.forEach(t => {
      const opt = document.createElement('option');
      opt.value = t.name;
      opt.textContent = `${t.name} (${t.date || 'no date'})`;
      tournamentSelect.appendChild(opt);
    });
  }

  function sortAthletes() {
    const {
      key,
      asc
    } = currentSort;
    athletesData.sort((a, b) => {
      let valA, valB;
      switch (key) {
        case 'name':
          valA = a.full_name.toLowerCase();
          valB = b.full_name.toLowerCase();
          break;
        case 'gender':
          valA = a.gender || '';
          valB = b.gender || '';
          break;
        case 'club':
          valA = a.club_name || '';
          valB = b.club_name || '';
          break;
        case 'weight':
          valA = a.weight_category || '';
          valB = b.weight_category || '';
          break;
        case 'points':
          valA = a.total_points || 0;
          valB = b.total_points || 0;
          break;
      }
      if (valA < valB) return asc ? -1 : 1;
      if (valA > valB) return asc ? 1 : -1;
      return 0;
    });
  }

  function renderTable() {
    const selectedTournament = tournamentSelect.value;
    const withResults = withResultsCheckbox.checked;
    tableBody.innerHTML = '';
    let visibleCount = 0;

    athletesData.forEach(a => {
      let tournamentsToShow = a.tournaments || [];
      if (selectedTournament) tournamentsToShow = tournamentsToShow.filter(t => t.name === selectedTournament);
      if (withResults && tournamentsToShow.length === 0) return;

      visibleCount++;

      const tournamentText = tournamentsToShow.length > 0 ?
        tournamentsToShow.map(t => {
          const badge =
            t.placement === 1 ? '<span class="badge bg-success">ðŸ¥‡ 1st</span> ' :
            t.placement === 2 ? '<span class="badge bg-warning text-dark">ðŸ¥ˆ 2nd</span> ' :
            t.placement === 3 ? '<span class="badge bg-info text-dark">ðŸ¥‰ 3rd</span> ' : '';
          return `${badge}<strong>${t.name}</strong><br>
                    <small class="text-muted">${t.date || ''} | Wins: ${t.wins || 0} | Points: ${t.points_earned || 0}</small>`;
        }).join('<hr class="my-1">') :
        '<span class="text-muted">No results</span>';

      const genderBadge =
        a.gender?.toLowerCase() === 'male' ?
        '<span class="badge bg-primary">M</span>' :
        a.gender?.toLowerCase() === 'female' ?
        '<span class="badge bg-pink text-white">F</span>' :
        '-';
      const row = document.createElement('tr');
      row.innerHTML = `
  <td class="text-center fw-bold">${visibleCount}</td>
  <td><i class="bi bi-person-circle text-primary me-1"></i> ${a.full_name}</td>
  <td>${genderBadge}</td>
  <td>${a.club_name || '-'}</td>
  <td>${a.weight_category || '-'}</td>
  <td><span class="fw-bold text-primary">${a.total_points ?? 0}</span></td>
  <td>${tournamentText}</td>
`;
      tableBody.appendChild(row);
    });

    athleteCount.textContent = `${visibleCount} athlete${visibleCount !== 1 ? 's' : ''}`;
  }

  sortableHeaders.forEach(header => {
    header.addEventListener('click', () => {
      const key = header.getAttribute('data-sort');
      currentSort.key === key ? currentSort.asc = !currentSort.asc : (currentSort.key = key, currentSort.asc = true);
      sortAthletes();
      renderTable();
    });
  });

  [ageCategorySelect, genderFilter].forEach(el =>
    el.addEventListener('change', () => fetchAthletes(Array.from(ageCategorySelect.selectedOptions).map(opt => opt.value)))
  );
  searchFilter.addEventListener('input', () => fetchAthletes(Array.from(ageCategorySelect.selectedOptions).map(opt => opt.value)));
  tournamentSelect.addEventListener('change', renderTable);
  withResultsCheckbox.addEventListener('change', renderTable);
  refreshBtn.addEventListener('click', () => fetchAthletes(Array.from(ageCategorySelect.selectedOptions).map(opt => opt.value)));

  fetchAthletes();
</script>